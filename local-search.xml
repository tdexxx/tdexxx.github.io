<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/31/hello-world/"/>
    <url>/2024/08/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/31/hello-world2/"/>
    <url>/2024/08/31/hello-world2/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>不定积分</title>
    <link href="/2023/10/29/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
    <url>/2023/10/29/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>$$<br>\begin{flalign*}<br>例1 \quad 求 \int^\ x^4dx<br>\end{flalign*}<br>$$<br>$$<br>解：因(\frac{x^5}{5})^\prime &#x3D; x^4故\frac{x^5}{5}是x^4的一个原函数，所以<br>$$<br>$$<br>\int^\ x^4dx &#x3D; \frac{x^5}{5}+C<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg</title>
    <link href="/2023/08/14/ffmpeg/"/>
    <url>/2023/08/14/ffmpeg/</url>
    
    <content type="html"><![CDATA[<ol><li>安装FFmpeg<br>FFmpeg 是一个免费、开源的跨平台视频和音频流处理工具。</li></ol><p>首先，打开终端（在 Windows 中是命令提示符，在 Windows 搜索栏中输入“cmd”，然后打开命令提示符），然后运行以下命令以检查您的系统上是否已安装 FFmpeg：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ffmpeg -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>如果显示安装的版本号，表明 FFmpeg 已安装。否则，需要进行安装。</p><p>1.1 Windows系统<br>转到 FFmpeg 官方网站，然后下载最新版本的 Windows 安装包。</p><p>下载完成后，双击安装包文件，然后按照提示操作安装 FFmpeg。</p><p>1.2 Ubuntu 和 Debian 系统<br>对于 Ubuntu 和 Debian 系统，可以使用 apt 包管理器来安装 FFmpeg：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install ffmpeg<br></code></pre></td></tr></table></figure><p>1.3 CentOS 和 Fedora 系统<br>对于 CentOS 和 Fedora 系统，可以使用 yum 来安装 FFmpeg：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install ffmpeg<br></code></pre></td></tr></table></figure><p>1.4 macOS系统<br>对于 macOS系统，可以使用 Homebrew 来安装 FFmpeg：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>ffmpeg<br></code></pre></td></tr></table></figure><p>在安装完成后，可以再次运行</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ffmpeg -<span class="hljs-built_in">version</span> <br></code></pre></td></tr></table></figure><p>命令来检查是否安装成功。如果安装成功，将显示安装的版本号等信息。</p><ol start="2"><li>安装rtsp-simple-server<br>安装rtsp服务器，可以去这个链接</li></ol><p><a href="https://github.com/aler9/rtsp-simple-server/releases">rtsp-simple-server</a></p><p>下载对应编译好的文件直接运行就好。</p><ol start="3"><li>FFmpeg推流<br>注意：在推流之前先运行rtsp-simple-server</li></ol><p>3.1 UDP推流</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -re -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -c copy -f rtsp rtsp:<span class="hljs-comment">//127.0.0.1:8554/stream</span><br></code></pre></td></tr></table></figure><p>3.2 TCP推流</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -re -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -c copy -rtsp_transport tcp -f rtsp rtsp:<span class="hljs-comment">//127.0.0.1:8554/stream</span><br></code></pre></td></tr></table></figure><p>3.3 循环推流</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -re -stream_loop -<span class="hljs-number">1</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -c copy -f rtsp rtsp:<span class="hljs-comment">//127.0.0.1:8554/stream</span><br></code></pre></td></tr></table></figure><p>其中：</p><p>-re 为以流的方式读取；</p><p>-stream_loop 为循环读取视频源的次数，-1为无限循环；</p><p>-i 为输入的文件；</p><p>-f 为格式化输出到哪里；</p><p>4 拉流<br>4.1 ffplay&#x2F;VLC拉流显示</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ffplay rtsp<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:8554/stream</span><br></code></pre></td></tr></table></figure><p>如需用VLC拉流，需安装VLC播放器，下载网站为：VLC 官方网站</p><p>内有各个系统的安装包，选择自己的系统下载安装即可。</p><p>安装好后，打开网络串流，输入对应的地址即可拉流显示。</p><p><img src="https://img-blog.csdnimg.cn/d90d0d575a0643fdb4e8038b459a6833.png" alt="图片"></p><p>4.2 FFmpeg拉流保存成视频</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -stimeout <span class="hljs-number">30000000</span> -i rtsp://<span class="hljs-number">127.0.0.1:8554</span>/stream -c copy output.mp4<br></code></pre></td></tr></table></figure><p>-stimeout 30000000 为等待RTSP 流连接的时间，单位为us微秒，30000000 为等待 30 秒，如果连接失败则退出。特别注意该字段要放在rtsp地址之前，否者无效。<br>————————————————<br>版权声明：本文为CSDN博主「NOAHCHAN1987」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/chan1987818/article/details/128219230">https://blog.csdn.net/chan1987818/article/details/128219230</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg 转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#</title>
    <link href="/2023/08/05/2023-8-5%20C#%20023008/"/>
    <url>/2023/08/05/2023-8-5%20C#%20023008/</url>
    
    <content type="html"><![CDATA[<p>使用返回布尔值的方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> pangram = <span class="hljs-string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>;<br>Console.WriteLine(pangram.Contains(<span class="hljs-string">&quot;fox&quot;</span>));<br>Console.WriteLine(pangram.Contains(<span class="hljs-string">&quot;cow&quot;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">True<br>False<br></code></pre></td></tr></table></figure><p>什么是逻辑非？下面两个代码行生成相同的结果。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// These two lines of code will create the same output</span><br><br><span class="hljs-built_in">Console</span>.WriteLine(pangram.<span class="hljs-built_in">Contains</span>(<span class="hljs-string">&quot;fox&quot;</span>) == <span class="hljs-literal">false</span>);<br><span class="hljs-built_in">Console</span>.WriteLine(!pangram.<span class="hljs-built_in">Contains</span>(<span class="hljs-string">&quot;fox&quot;</span>));<br></code></pre></td></tr></table></figure><p>使用逻辑非运算符</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">string pangram = <span class="hljs-string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>;<br><span class="hljs-built_in">Console</span>.WriteLine(!pangram.<span class="hljs-built_in">Contains</span>(<span class="hljs-string">&quot;fox&quot;</span>));<br><span class="hljs-built_in">Console</span>.WriteLine(!pangram.<span class="hljs-built_in">Contains</span>(<span class="hljs-string">&quot;cow&quot;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>概括</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">计算字符串的相等性需要考虑字符串可能具有不同的大小写以及前导空格或尾随空格。 根据具体情况，使用 <span class="hljs-built_in">ToLower</span>() 或 <span class="hljs-built_in">ToUpper</span>() 帮助程序方法，并使用 <span class="hljs-built_in">Trim</span>() 帮助程序方法来提高两个字符串相等的可能性。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-Ubuntu22.04安装使用Clash</title>
    <link href="/2023/07/04/clash%20for%20ubuntu/"/>
    <url>/2023/07/04/clash%20for%20ubuntu/</url>
    
    <content type="html"><![CDATA[<p>Linux-Ubuntu22.04安装使用Clash - 个人博客网站 | 张涵哲<br>02&#x2F;19</p><p>既然已经寻找Linux安装Clash的教程，那么本文就假定你在Windows下已经使用过Clash，有自己的订阅，文章中提到的需要下载的文件，会在末尾提供下载地址，如果找不到或地址失效请联系我补链接，文章不会用傻瓜式命令让你直接安装成功，希望看文章的你最起码懂一些基础的Linux基础命令</p><p>Linux下的网络环境比较差，所以需要提前在Win下准备好相关文件，首先需要准备的是Clash本身，在Win下可以通过代理访问Github，下载文件比较方便，点击访问Clash下载页面，选择一个合适的版本下载即可</p><p>然后打开Win下的Clash，在常规页面下点开配置文件主目录，在弹出的目录中将</p><p>Country.mmdb</p><p>文件复制出来，这个配置文件是动态IP库，记录各个国家IP地址信息，这样Clash才知道那些是国外网站，哪些是国内网站，在Linux下这个文件需要联网下载，很大概率会失败，所以需要提前准备</p><p>然后在Win下点开Clash的配置页面，找到目前正在使用的订阅，右键打开文件夹，文件夹打开后资源管理器会默认选中对应的文件，将他复制出来即可</p><p>现在已经准备好了三个文件，一个是Clash本身，一个是Country.mmdb动态IP库，一个是.yml结尾的订阅文件，现在就可以进入Linux安装Clash了</p><p>首先将之前准备好的文件放入Linux中，找到之前准备的Clash文件，如果是从Github官网下载的文件，应该是压缩文件，将文件解压后放到</p><p>&#x2F;usr&#x2F;local&#x2F;bin</p><p>目录中（推荐该目录，可以在任何位置调用Clash），然后将文件名修改为</p><p>clash</p><p>（这里不重要，改名只为调用方便），效果如下所示</p><p>接下来在任意位置打开终端，输入</p><p>clash</p><p>然后回车，如果控制台输出了127.0.0.1:7890的代理地址，就像下面图片上这样，就说明你的Clash已经初始化成功了</p><p>如果在第二行downlaod时失败，就说明网络环境不是很好，这时就需要之前准备的动态IP库了（你的报错信息可能跟我有些出入，因为我这里直接下载成功了，为了模拟下载失败的效果我将网线拔了）</p><p>Clash初始化会创建</p><p>~&#x2F;.config&#x2F;clash</p><p>隐藏目录，动态IP库最终会被下载到该目录内，这里打开该目录，将目录内的文件清空，然后将之前准备好的</p><p>Country.mmdb</p><p>文件复制过去，重新执行clash命令，这样就可以解决下载报错的问题了</p><p>在</p><p>~&#x2F;.config&#x2F;clash</p><p>目录中可以发现，除了动态IP库之外还有一个config.yaml的文件，这个就是Clash的默认配置文件，将之前准备的.yml文件复制过来，重命名为config.yaml，打开刚刚的终端重新运行Clash</p><p>接着终端不要关闭，保持Clash的运行，然后打开linux的网络链接，配置代理地址为Clash提供的地址，一般都是</p><p>127.0.0.1:7890</p><p>，如下图所示，然后浏览器打开这个地址：<a href="http://clash.razord.top,就可以看到linux下基于web的clashui/">http://clash.razord.top，就可以看到Linux下基于WEB的ClashUI</a></p><p>需要注意的是，只有开启了Clash的代理后，这个页面才可以访问，否则是无法访问的，打开页面后就可以看到订阅中的代理，就可以正常使用了</p><p><a href="https://typecho.hanzhe.site/archives/72/">https://typecho.hanzhe.site/archives/72/</a></p><p>Ubuntu 22.04 LTS安装并配置Clash - 索尼安装clash</p><p>一、Clash For Linux GUI 通过图形界面使用</p><ol><li>下载Linux版本Clash For Windows<br>Clash For Windows 最新版本下载链接（GitHub）<br>蓝奏云网盘 Clash.for.Windows-0.19.25-x64下载链接 密码:2f92<br>普通的PC电脑下载x64版本，其他版本根据个人硬件选择</li><li>解压并启动</li></ol><h2 id="安装目录根据个人习惯-我习惯放在-opt目录下"><a href="#安装目录根据个人习惯-我习惯放在-opt目录下" class="headerlink" title="安装目录根据个人习惯 我习惯放在&#x2F;opt目录下"></a>安装目录根据个人习惯 我习惯放在&#x2F;opt目录下</h2><p>cd &#x2F;opt</p><h2 id="下载压缩包-若通过浏览器下载可忽略这一步-需安装有wget-若没有可以先下载-sudo-apt-install-wget-y"><a href="#下载压缩包-若通过浏览器下载可忽略这一步-需安装有wget-若没有可以先下载-sudo-apt-install-wget-y" class="headerlink" title="下载压缩包(若通过浏览器下载可忽略这一步) 需安装有wget 若没有可以先下载 sudo apt install wget -y"></a>下载压缩包(若通过浏览器下载可忽略这一步) 需安装有wget 若没有可以先下载 sudo apt install wget -y</h2><p>sudo wget <a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/tag/0.19.25">https://github.com/Fndroid/clash_for_windows_pkg/releases/tag/0.19.25</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>sudo tar -zxf Clash.for.Windows-0.19.25-x64-linux.tar.gz</p><h2 id="文件夹更名-更方便操作"><a href="#文件夹更名-更方便操作" class="headerlink" title="文件夹更名 更方便操作"></a>文件夹更名 更方便操作</h2><p>sudo mv ‘Clash for Windows-0.19.25-x64-linux’ clash-GUI</p><h2 id="进入clash-GUI目录启动Clash"><a href="#进入clash-GUI目录启动Clash" class="headerlink" title="进入clash-GUI目录启动Clash"></a>进入clash-GUI目录启动Clash</h2><p>.&#x2F;cfw<br>复制代码<br>3. 加载订阅链接<br>订阅链接一般在 “仪表盘” 或者 “我的订阅” 这样的标签内，不同的代理服务商不太一样<br>*Windows下Clash主界面有System Proxy选项（系统代理），需要手动打开才能开启代理，Linux下开启Clash即为打开代理<br>4. 配置端口和系统代理<br>进入Proxies界面，选择你需要的代理模式。其中：<br>Global（全局模式）：所有流量都使用代理<br>Rule（规则模式） ：根据配置文件内的规则进行分流，部分流量使用代理，部分流量不使用（推荐此方式）<br>Direct（直连模式）：所有流量都不使用代理<br>Script（脚本模式）：根据高级脚本来进行分流（不推荐无编程经验用户使用）<br>*在Rule模式下，点击分组右上角的小眼睛可以切换显示所有节点或收起分组<br>Clash 启动时默认使用第一台服务器，在Proxies界面可任意选择一可用节点，若当前节点无法联网可尝试更换<br>Linux下需要配置网络代理才能正常使用Clash，需要注意的是：<br>当系统网络代理打开的时候，若Clash未启动，则无法正常访问网页<br>当Clash开启但系统网络代理为Disabled状态时，代理无效<br>这样手动切换起来很麻烦 解决方案<br>打开 Settings→Network 改Network Proxy为Manual（手动），然后填入地址和端口即可（端口可以更改，依据自己的配置文件）<br>端口可以在Clash主界面 General → Port 看到，点击可以手动更改端口，新版本的Mixed Port整合了http + socks默认为7890，我记得老版本的http port为7890、socks为7891，这个具体可以在 ~&#x2F;.config&#x2F;clash&#x2F;config.yaml 配置文件中查到<br>打开浏览器输入<a href="http://www.google.com/">www.google.com</a> 检查是否代理成功<br>5. 设置终端代理<br>如果有终端代理的需求，点击Clash主界面上的终端图标可唤出终端代理命令<br>！！！ 进入Proxies界面，将代理模式改为Global， 全局模式终端代理才生效</p><h1 id="！！！进入Proxies界面，将代理模式改为Global"><a href="#！！！进入Proxies界面，将代理模式改为Global" class="headerlink" title="！！！进入Proxies界面，将代理模式改为Global"></a>！！！进入Proxies界面，将代理模式改为Global</h1><h1 id="将-mixedPort-更换为自己的端口-端口根据个人配置文件填写-这里我是7890"><a href="#将-mixedPort-更换为自己的端口-端口根据个人配置文件填写-这里我是7890" class="headerlink" title="将%mixedPort%更换为自己的端口 端口根据个人配置文件填写 这里我是7890"></a>将%mixedPort%更换为自己的端口 端口根据个人配置文件填写 这里我是7890</h1><h1 id="临时使用终端代理"><a href="#临时使用终端代理" class="headerlink" title="临时使用终端代理"></a>临时使用终端代理</h1><p>export https_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> http_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:7890</p><h1 id="永久使用终端代理-写入到-bashrc文件"><a href="#永久使用终端代理-写入到-bashrc文件" class="headerlink" title="永久使用终端代理 写入到.bashrc文件"></a>永久使用终端代理 写入到.bashrc文件</h1><p>echo “export https_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> http_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:7890”&gt;&gt;~&#x2F;.bashrc</p><h1 id="刷新配置文件"><a href="#刷新配置文件" class="headerlink" title="刷新配置文件"></a>刷新配置文件</h1><p>source ~&#x2F;.bashrc<br>#测试是否成功，IP是否更改 其他测试方法 curl ifconfig.me&#x2F;all 或者 curl <a href="http://www.google.com出现一大堆html代码/">www.google.com出现一大堆html代码</a><br>curl cip.cc<br>复制代码<br>二、 Clash For Linux Shell 通过命令行使用</p><ol><li>下载Linux版本二进制Clash文件<br>Clash-Linux最新版本下载链接（GitHub）<br>蓝奏云网盘 clash-linux-amd64-v1.11.4下载链接 密码:6bk4<br>普通的PC电脑下载amd64也就是x64版本，其他版本根据个人硬件选择</li><li>配置并启动</li></ol><h2 id="安装目录根据个人习惯-我习惯放在-opt目录下-1"><a href="#安装目录根据个人习惯-我习惯放在-opt目录下-1" class="headerlink" title="安装目录根据个人习惯 我习惯放在&#x2F;opt目录下"></a>安装目录根据个人习惯 我习惯放在&#x2F;opt目录下</h2><p>cd &#x2F;opt</p><h2 id="下载压缩包-若通过浏览器下载可忽略这一步-需安装有wget-若没有可以先下载-sudo-apt-install-wget-y-1"><a href="#下载压缩包-若通过浏览器下载可忽略这一步-需安装有wget-若没有可以先下载-sudo-apt-install-wget-y-1" class="headerlink" title="下载压缩包(若通过浏览器下载可忽略这一步) 需安装有wget 若没有可以先下载 sudo apt install wget -y"></a>下载压缩包(若通过浏览器下载可忽略这一步) 需安装有wget 若没有可以先下载 sudo apt install wget -y</h2><p>sudo wget <a href="https://github.com/Dreamacro/clash/releases/download/v1.11.4/clash-linux-amd64-v1.11.4.gz">https://github.com/Dreamacro/clash/releases/download/v1.11.4/clash-linux-amd64-v1.11.4.gz</a></p><h2 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h2><p>sudo gzip -d clash-linux-amd64-v1.11.4.gz</p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>sudo mv clash-linux-amd64-v1.11.4.gz clash-linux</p><h2 id="赋予二进制文件可执行权限"><a href="#赋予二进制文件可执行权限" class="headerlink" title="赋予二进制文件可执行权限"></a>赋予二进制文件可执行权限</h2><p>sudo chmod a+x clash-linux<br>复制代码<br>如果之前安装了图形界面的Clash，会在 ~&#x2F;.config&#x2F; 目录下生成一个clash文件夹，如果要使用二进制版本的clash需要先删除这个文件夹</p><h1 id="执行二进制文件会在-config下初始化生成文件夹clash-cache-db-config-yaml-Country-mmdb-先Ctrl-C停止运行"><a href="#执行二进制文件会在-config下初始化生成文件夹clash-cache-db-config-yaml-Country-mmdb-先Ctrl-C停止运行" class="headerlink" title="执行二进制文件会在~&#x2F;.config下初始化生成文件夹clash(cache.db config.yaml Country.mmdb) 先Ctrl + C停止运行"></a>执行二进制文件会在~&#x2F;.config下初始化生成文件夹clash(cache.db config.yaml Country.mmdb) 先Ctrl + C停止运行</h1><p>.&#x2F;clash-linux<br>复制代码<br>有的代理服务商会直接给出配置文件config.yaml，如果没有，可以将订阅链接直接粘贴在浏览器网址栏，然后搜索，会直接下载下来文件或者展示出配置文件，如果搜索到的是一大堆字符则需要在订阅链接的后面添加&amp;flag&#x3D;clash ，然后会下载下来一个文件，将其更名为config.yaml即可<br>将得到的配置文件更名为config.yaml，替换~&#x2F;.config&#x2F;clash下自动生成的config.yaml，删除Country.mmdb文件，然后再次执行 .&#x2F;clash-linux,会开始下载Country.mmdb文件，需要稍等一会，待出现端口和节点信息时，将网络代理设置为手动，填入地址和端口号即可。<br>打开浏览器输入<a href="http://www.google.com/">www.google.com</a> 检查是否代理成功<br>原版Clash可以通过网页来管理，更换代理模式、选择节点（clash和系统网络代理都要打开才可以访问）<br>浏览器搜索网址clash.razord.top<br>3. 设置终端代理<br>同上<br>三、 优化启动方式</p><ol><li>systemctl服务 + shell脚本（仅适用于原版clash，无法用于Clash For Windows）<br>首先将clash注册为systemctl服务<br>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system下新建一个文件clash.service<br>填入内容<br>[Unit]<br>Description&#x3D;Clash Linux<br>[Service]<br>Type&#x3D;simple</li></ol><h1 id="用来启动clash-linux的用户"><a href="#用来启动clash-linux的用户" class="headerlink" title="用来启动clash-linux的用户"></a>用来启动clash-linux的用户</h1><p>User&#x3D;ice</p><h1 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h1><p>ExecStart&#x3D;&#x2F;opt&#x2F;clash-linux<br>[Install]<br>WantedBy&#x3D;multi-user.target<br>复制代码<br>关于systemctl脚本的更多内容可以参考<br>Systemd 入门教程：实战篇 - 阮一峰的网络日志</p><h1 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h1><p>sudo systemctl daemon-reload<br>复制代码<br>然后可以写两个shell脚本，一个用来启动（vpns），一个用来关闭（vpnx）<br>#!&#x2F;bin&#x2F;bash</p><h1 id="Clash-Start"><a href="#Clash-Start" class="headerlink" title="Clash Start"></a>Clash Start</h1><h1 id="我用的是非root用户，root用户可以直接使用systemctl-start-clash，password替换为自己管理员的密码"><a href="#我用的是非root用户，root用户可以直接使用systemctl-start-clash，password替换为自己管理员的密码" class="headerlink" title="我用的是非root用户，root用户可以直接使用systemctl start clash，password替换为自己管理员的密码"></a>我用的是非root用户，root用户可以直接使用systemctl start clash，password替换为自己管理员的密码</h1><p>echo password | sudo -S systemctl start clash</p><h1 id="通过命令行更改系统代理设置为手动"><a href="#通过命令行更改系统代理设置为手动" class="headerlink" title="通过命令行更改系统代理设置为手动"></a>通过命令行更改系统代理设置为手动</h1><p>gsettings set org.gnome.system.proxy mode ‘manual’<br>复制代码<br>#!&#x2F;bin&#x2F;bash</p><h1 id="Clash-Stop"><a href="#Clash-Stop" class="headerlink" title="Clash Stop"></a>Clash Stop</h1><h1 id="我用的是非root用户，root用户可以直接使用systemctl-start-clash，password替换为自己管理员的密码-1"><a href="#我用的是非root用户，root用户可以直接使用systemctl-start-clash，password替换为自己管理员的密码-1" class="headerlink" title="我用的是非root用户，root用户可以直接使用systemctl start clash，password替换为自己管理员的密码"></a>我用的是非root用户，root用户可以直接使用systemctl start clash，password替换为自己管理员的密码</h1><p>echo password | sudo -S systemctl stop clash</p><h1 id="通过命令行禁用系统代理"><a href="#通过命令行禁用系统代理" class="headerlink" title="通过命令行禁用系统代理"></a>通过命令行禁用系统代理</h1><p>gsettings set org.gnome.system.proxy mode ‘none’<br>复制代码<br>然后可以把这两个脚本放在&#x2F;usr&#x2F;local&#x2F;bin目录下设置为全局的命令<br>这样就可以通过vpns vpnx这两个命令实现同时打开或者关闭Clash和系统代理<br><a href="http://www.zztongyun.com/article/%E7%B4%A2%E5%B0%BC%E5%AE%89%E8%A3%85clash">http://www.zztongyun.com/article/%E7%B4%A2%E5%B0%BC%E5%AE%89%E8%A3%85clash</a></p><p>Ubuntu 使用 Clash For Linux 客户端教程<br>在自己的开发平台上到处都需要网络代理环境，Clash 是款用 Go 语言开发的软件，可以直接下载预编译的版本进行部署使用网络代理，与 Windows 不同，Linux 提供了多种架构的预编译二进制文件，下载要注意区分，演示平台的 Ubuntu 为 X86_64 架构，选择的为 Linux-amd64 文件。<br>操作步骤<br>1、在 Ubuntu 打开终端，切换到超级管理员权限，创建 Clash 文件夹，并通过 Github Clash 仓库选择对应的版本通过 Wget 进行在线下载，下载地址可以“右键复制链接”获取，如下图：<br>#GithubClash<br><a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></p><p>#切换超级管理员<br>su</p><p>#创建文件夹<br>cd&amp;&amp;mkdirclash<br>cdclash</p><p>#下载Clash文件<br>wget<a href="https://github.com/Dreamacro/clash/releases/download/v1.14.0/clash-linux-amd64-v1.14.0.gz">https://github.com/Dreamacro/clash/releases/download/v1.14.0/clash-linux-amd64-v1.14.0.gz</a><br>2、下载 Clash 文件完成，进行解压文件，给予文件权限，并为 Clash 文件改名移入另一个文件目录中，之所以如此操作是为了后续加入开机自启做准备，可通过查看版本确认操作是否成功，如下图：<br>#解压文件<br>gzip-dclash-linux-amd64-v1.14.0.gz</p><p>#给予权限<br>chmod+xclash-linux-amd64-v1.14.0</p><p>#改名移动<br>mvclash-linux-amd64-v1.14.0&#x2F;usr&#x2F;local&#x2F;bin&#x2F;clash</p><p>#查看版本<br>clash-v<br>3、启动 Clash 客户端生成 config.yaml 文件，进入 $HOME&#x2F;.config&#x2F;clash&#x2F; 目录，通过命令导入 Clash 订阅链接到 config.yaml 文件，再次执行启动 Clash For Linux 客户端，如下图：<br>#启动Clash<br>clash</p><p>#进入目录<br>cd$HOME&#x2F;.config&#x2F;clash&#x2F;</p><p>#导入订阅<br>wget-Oconfig.yaml订阅地址</p><p>#手动节点（适用于自建）<br>ls$HOME&#x2F;.config&#x2F;clash&#x2F;config.yaml<br>vi&#x2F;root&#x2F;.config&#x2F;clash&#x2F;config.yaml<br>4、设置客户端完成，就要解决开机自启的问题了，彧繎使用 systemd 来解决，先通过命令生成 systemd 配置文件，接着配置开机自启，并启动 clash 服务，为 Ubuntu 设置环境变量，如下图：<br>#生成systemd配置文件<br>cat&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;clash.service&lt;&lt;EOF<br>[Unit]<br>Description&#x3D;Clash-Arule-basedtunnelinGo<br>Documentation&#x3D;<a href="https://github.com/Dreamacro/clash/wiki">https://github.com/Dreamacro/clash/wiki</a><br>[Service]<br>OOMScoreAdjust&#x3D;-1000<br>ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;clash-f&#x2F;root&#x2F;.config&#x2F;clash&#x2F;config.yaml<br>Restart&#x3D;on-failure<br>RestartSec&#x3D;5<br>[Install]<br>WantedBy&#x3D;multi-user.target<br>EOF</p><p>#配置开机自启<br>systemctlenableclash</p><p>#启动clash服务<br>systemctlstartclash</p><p>#配置环境变量<br>echo-e”exporthttp_proxy&#x3D;<a href="http://127.0.0.1:7890/nexporthttps_proxy=http://127.0.0.1:7890%22%3E%3E~/.bashrc">http://127.0.0.1:7890\nexporthttps_proxy=http://127.0.0.1:7890&quot;&gt;&gt;~/.bashrc</a><br>5、为确保万无一失，打开 Ubuntu 的“设置”管理，在“网络”内将“网络代理”的“自动”改为“手动”，根据以下内容进行填写 HTTP、HTTPS 和 Socks 地址，如下图：<br>#HTTP代理<br>127.0.0.0:7890</p><p>#HTTPS代理<br>127.0.0.0:7890</p><p>#Socks主机<br>127.0.0.0:7891<br>6、以上设置完成就可以在 Firefox 输入 clash.razord.top 进行切换设置订阅节点了，至此 Clash 在 Linux Ubuntu 20.04 上的配置就算是完成了，如下图：<br>#节点管理<br><a href="http://clash.razord.top/#/proxies">http://clash.razord.top/#/proxies</a></p><p>#节点购买<br><a href="https://www.aa66aa.com/#/register?code=PPJn00bx">https://www.aa66aa.com/#/register?code=PPJn00bx</a><br>最后说明<br>关于 Ubuntu 使用 Clash For Linux 客户端，目前测试适用于 Ubuntu 18.04 的更高版本，操作前切记要切换到超级管理员模式下，否则操作时会提示权限不足，导致配置失败，推荐使用第三方的订阅链接地址，不推荐手动配置订阅节点，手动配置节点繁琐容易出错。<br><a href="https://opclash.com/fenxiang/302.html">https://opclash.com/fenxiang/302.html</a></p><p>在 ubuntu服务器上安装Clash<br>一、前言<br>这是一个媲美 Surge 的代理客户端，免费、简洁的界面，支持 SS、V2Ray、SOCKS5 协议、支持规则分流和屏蔽广告（类似 Surge 的规则），支持托管订阅。<br>二、必要条件</p><ol><li>linux服务器一台<br>三、安装Clash到 Linux 系统上</li><li>下载并安装Clash<br>12345678910<br>进入当前用户根目录cd~#下载二进制文件wget <a href="https://github.com/Dreamacro/clash/releases/download/v0.16.0/clash-linux-amd64-v0.16.0.gz#%E4%BD%BF%E7%94%A8">https://github.com/Dreamacro/clash/releases/download/v0.16.0/clash-linux-amd64-v0.16.0.gz#使用</a> gzip 解压gzip -d clash-linux-amd64-v0.16.0.gz#移动到binmv clash-linux-amd64-v0.16.0 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;clash#添加执行权限chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;clash<br>2.配置Clash启动服务<br>1<br>nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;clash.service<br>把下面的信息复制进去<br>123456789101112<br>[Unit]Description&#x3D;clash serviceAfter&#x3D;network.target[Service]Type&#x3D;simpleUser&#x3D;rootExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;clashRestart&#x3D;on-failure# or always, on-abort, etc[Install]WantedBy&#x3D;multi-user.target<br>3.设置 Clash 开机自启<br>12<br>systemctl daemon-reload<br>systemctlenableclash<br>其他功能<br>service clash start # 启动<br>service clash stop # 停止<br>service clash restart # 重启<br>service clash status # 状态<br>4.下载 dashboard 控制面板<br>12345678910</li></ol><h1 id="创建-config目录mkdir-config-创建-clash-目录mkdir-config-clash-下载-dashboardwget-https-github-com-haishanh-yacd-archive-gh-pages-zip-用-unzip解压缩unzip-gh-pages-zip-把文件改名层-dashboardmv-yacd-gh-pages-config-clash-dashboard"><a href="#创建-config目录mkdir-config-创建-clash-目录mkdir-config-clash-下载-dashboardwget-https-github-com-haishanh-yacd-archive-gh-pages-zip-用-unzip解压缩unzip-gh-pages-zip-把文件改名层-dashboardmv-yacd-gh-pages-config-clash-dashboard" class="headerlink" title="创建 .config目录mkdir .config# 创建 clash 目录mkdir ~&#x2F;.config&#x2F;clash# 下载 dashboardwget https://github.com/haishanh/yacd/archive/gh-pages.zip# 用 unzip解压缩unzip gh-pages.zip# 把文件改名层 dashboardmv yacd-gh-pages&#x2F; ~&#x2F;.config&#x2F;clash&#x2F;dashboard&#x2F;"></a>创建 .config目录mkdir .config# 创建 clash 目录mkdir ~&#x2F;.config&#x2F;clash# 下载 dashboardwget <a href="https://github.com/haishanh/yacd/archive/gh-pages.zip#">https://github.com/haishanh/yacd/archive/gh-pages.zip#</a> 用 unzip解压缩unzip gh-pages.zip# 把文件改名层 dashboardmv yacd-gh-pages&#x2F; ~&#x2F;.config&#x2F;clash&#x2F;dashboard&#x2F;</h1><p>5.配置 Clash 文件<br>1234</p><h1 id="进入配置文件目录cd-config-编辑-Clash-配置文件config-yamlnano-config-yaml"><a href="#进入配置文件目录cd-config-编辑-Clash-配置文件config-yamlnano-config-yaml" class="headerlink" title="进入配置文件目录cd~&#x2F;.config&#x2F;# 编辑 Clash 配置文件config.yamlnano config.yaml"></a>进入配置文件目录cd~&#x2F;.config&#x2F;# 编辑 Clash 配置文件config.yamlnano config.yaml</h1><p>config.yaml配置<br>123456789<br>mixed-port:7890allow-lan:falsemode: rule<br>log-level: info<br>external-controller:0.0.0.0:9090<br>external-ui: ~&#x2F;.config&#x2F;clash&#x2F;dashboard<br>secret:”1235”dns:<br>    default-nameserver:[127.0.0.1]<br>6.启动前<br>配置文件里面的加密是重点<br>7.启动 Clash<br>12345678910<br>service clash start&#96;&#96;&#96;&#96;### 8.🎉 完成访问<a href="http://serverip:9090/ui/">http://serverip:9090/ui/</a> 试试吧## 四、通过V2ray访问已安装Clash的服务器v2ray配置如下<br>bash<br>{<br>“inbounds”: [<br>{<br>“port”: 30123,<br>“listen”:“127.0.0.1”, &#x2F;&#x2F;只监听 127.0.0.1，避免除本机外的机器探测到开放了 30123 端口<br>“protocol”: “vmess”,<br>“settings”: {<br>“clients”: [<br>{<br>“id”: “b831381d-6324-4d53-ad4f-8cda48b30811”,<br>“alterId”: 64<br>}<br>]<br>},<br>“streamSettings”: {<br>“network”: “ws”,<br>“wsSettings”: {<br>“path”: “&#x2F;ray30123”<br>}<br>}<br>}<br>],<br>“outbounds”: [<br>{<br>“protocol”: “socks”,<br>“settings”: {<br>“servers”: [{<br>“address”: “127.0.0.1”,<br>“port”: 7890,<br>“auth”: “noauth”<br>}]<br>}<br>}<br>]<br>}<br>123</p><h3 id="在线-json-编辑器"><a href="#在线-json-编辑器" class="headerlink" title="在线 json 编辑器"></a><a href="http://jsoneditoronline.org/">在线 json 编辑器</a></h3><h2 id="五、关闭端口"><a href="#五、关闭端口" class="headerlink" title="五、关闭端口"></a>五、关闭端口</h2><p>bash<br>#打开端口<br>iptables -A INPUT -p $port -j ACCEPT<br>#关闭端口<br>iptables -A INPUT -p $port -j DROP</p><pre><code class="hljs">[参考1]https://breakertt.moe/2019/08/20/clash_gateway/index.html[参考2]https://qust.me/post/678ffe99.html文章作者Suan上次更新2019-11-18许可协议CC BY-NC-ND 4.0赞赏支持微信打赏支付宝打赏https://suan.eu.org/post/clash-%E6%95%99%E7%A8%8B/</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Ubuntu22.04</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vs2022 配置使用c++20编译器</title>
    <link href="/2023/07/04/C++20/"/>
    <url>/2023/07/04/C++20/</url>
    
    <content type="html"><![CDATA[<h1 id="vs2022-配置使用c-20编译器"><a href="#vs2022-配置使用c-20编译器" class="headerlink" title="vs2022 配置使用c++20编译器"></a>vs2022 配置使用c++20编译器</h1><p>在VS2022中配置C++20编译选项非常简单，只需要按照以下步骤进行即可：</p><p>打开你的项目，在Solution Explorer视图中右键点击你的项目，选择“Properties”。</p><p>在弹出的窗口中选择“Configuration Properties” -&gt; “C&#x2F;C++” -&gt; “Language”。</p><p>在“C++ Language Standard”下拉菜单中选择“ISO C++20 Standard (&#x2F;std:c++20)”。</p><p>点击“OK”保存更改。</p><p>这样就完成了在VS2022中配置C++20编译选项的操作。接下来你可以进行编译和调试工作了。</p><p>请注意，使用C++20特性时，还需要确保项目的头文件和库文件都支持C++20标准。如果您在使用C++20的过程中遇到了问题，请检查这些方面是否正确配置。<img src="https://img-blog.csdnimg.cn/1890ea830fcc49dab7b08890e2675846.png" alt="img"></p><p>————————————————<br>版权声明：本文为CSDN博主「百鸣」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/huapeng_guo/article/details/130213611">https://blog.csdn.net/huapeng_guo/article/details/130213611</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>vs2022 C++20</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode插件</title>
    <link href="/2023/07/02/vscode%E6%8F%92%E4%BB%B6/"/>
    <url>/2023/07/02/vscode%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>1、LiveServer（实时更新网页<br>2、REST Client（客户端请求<br>3、GitLens（git查看修改<br>4、CSS Peek（查css代码<br>5、Quokka.js（提醒js代码错误<br>6、CodeSnap（代码截图<br>7、Auto Rename Tag（自动修改前后标签<br>8、Snippets（缩写<br>9、Bracket Pair Colorizer（括号颜色<br>10、indent-rainbow（缩进颜色<br>11、vscode-icons（更好识别的图标<br>12、Prettier（自动整理代码格式<br>13、Color Highlight（颜色提醒<br>14、Dracula Official（主题</p>]]></content>
    
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Movies Test</title>
    <link href="/2023/06/02/Movies%20Test/"/>
    <url>/2023/06/02/Movies%20Test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Movies</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>English word</title>
    <link href="/2023/06/01/English%20word/"/>
    <url>/2023/06/01/English%20word/</url>
    
    <content type="html"><![CDATA[<p>deteriorate v. 恶化，变坏</p><p>shrink </p><ul><li>v. （使）缩小，减少；（通常指布料、衣服等洗后）缩水，皱缩；退缩，畏缩；畏避，回避（工作、责任等）</li><li>n. &lt;非正式&gt; 精神病学家，心理学家；收缩；畏缩</li></ul><p>functioning </p><ul><li>n. 运行，运作；[计]功能；机能；起酌（function 的动名词）</li><li>v. 运行，起作用（function 的现在分词形式）</li></ul><p>plot </p><ul><li>n. 阴谋，密谋；情节；（专用的）小块地；（表现两个变量关系的）图表；&lt;美&gt;图表，地图；&lt;美&gt;底层平面图</li><li>v. 密谋，暗中策划；（在地图上）画出，标出；构思（情节）；绘制（曲线）；绘制（图表）；在图表上标记，布置；用图表说明；计划，制订</li></ul><p>far more 更多：表示数量或程度比另一个事物多得多的意思。&#x3D; very</p><p>entire </p><ul><li>adj. 全部的，整个的；完全的，绝对的；（公马）未经阉割的；（叶子）全缘的，边缘光滑的</li><li>n. 未经阉割的公马，种马</li></ul><p>seriously </p><p>adv. 严重地，恶劣地；严肃地，认真地；说正经的，说实在的；&lt;非正式&gt;真的，当真；&lt;非正式&gt;非常，极其</p><p>red flag  红旗：一个警告信号，表示某事可能存在问题或危险。</p><p>may be involved 全心投入；有对象了</p><p>microwave oven 微波炉：一种用于加热和烹饪食物的家用电器，通过产生微波来使食物中的水分子振动，从而产生热量。</p><p>Totally adv. 完全地，整个地；对极了，太对了</p><p>Entire-whole-total-complete-all</p><p>Occasionally adv. 偶然，偶尔</p><p>panic </p><ul><li>n. 恐慌，惊慌；人心惶惶，惶恐不安；忙乱，慌乱；粟，稷，糜子</li><li>adj. 恐慌的</li><li>v. （使）恐慌，（使）惊慌失措</li></ul><p>high blood pressure &#x3D; Hypertension n. 高血压；过度紧张</p><p>antidepressants n. [药]抗抑郁药（antidepressant 的复数形式）；抗忧郁剂</p><p>figure </p><ul><li>n. 数字，数目，数值；数字符号，位数；身材，体型；（远处的）人影；（重要的）人物；（绘画或模型中）人像；（书中的）图、表；（数学）图形；价格，金额</li><li>v. （以重要地位）出现；&lt;美，非正式&gt;认为，估计；理解，弄懂；计算；用图画（或图形等）描绘，想象</li></ul><p>check on 查看，检查：查看或核实某人或某事的状况，以确保一切正常。medications n. 药物（medication 的复数形式）；药物治疗</p><p>building up积累，逐步增强：逐渐增加或发展，通常指力量、信心、技能等。</p><p>well-being&#x3D;health&#x3D;fitness</p><p>novel&#x3D;new 新奇的 新颖的 ways</p><p>Engaging </p><ul><li>adj. 迷人的，吸引人的</li><li>v. 雇用，聘请；参加，从事；吸引，引起（engage 的现在分词）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>English Sentence</title>
    <link href="/2022/12/10/English%20Sentence/"/>
    <url>/2022/12/10/English%20Sentence/</url>
    
    <content type="html"><![CDATA[<h2 id="瓷器"><a href="#瓷器" class="headerlink" title="瓷器"></a>瓷器</h2><hr><p><b>It<b> is not only widely used in China, but also <b>has become an important caarrier<b> of <b>Chinese culture to spread to the world.<b><br>它不仅在中国被广泛使用，还成为中国文化向世界传播的重要载体。</p><hr><p>Porcelain is not just used in daily life as tableware and decoration, but also has possessed an important position in the communication between artworks collection and porcellain.<br>瓷器不仅在日常生活中被用作餐具和装饰品，还在艺术品收藏和陶瓷交流中占据重要地位。</p><hr><p>It is a treasure of Chinese culture and a symbol of Chinese people’s wisdom and creation.<br>是中国文化的瑰宝，代表着中国人民的智慧和创造力。</p><hr><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p> Don’t reinvent the wheel. Focus on what truly matters for your organization.</p><p> Changing the world one contribution at a time!</p>]]></content>
    
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
